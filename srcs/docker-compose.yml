version: '3'

services:

  nginx:
#    image: nginx:latest
    image: owasp/modsecurity-crs:nginx
    container_name: nginx-waf
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    # Adjust resources if you need to
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '1.0'
    #       memory: 512M
    volumes:
#      - ./default.conf:/etc/nginx/conf.d/default.conf
#      - ./modsecurity.conf:/etc/nginx/modsecurity.conf
#      - ./owasp-crs:/etc/nginx/modsecurity-crs # Path for rules OWASP CRS
#    command: [nginx, "-g", "daemon off;"] # Command for init nginx
      # Nginx
      - ./srcs/conf/nginx/nginx.conf:/etc/nginx/nginx.conf:ro

      # ModSecurity principal
      - ./srcs/conf/modsecurity/modsecurity.conf:/etc/modsecurity.d/modsecurity.conf:ro

      # Override de CRS (opcional, recomendado)
      - ./srcs/conf/modsecurity/crs-setup.conf:/etc/modsecurity.d/owasp-crs/crs-setup.conf:ro

      # Reglas personalizadas (si las tienes)
      - ./srcs/conf/modsecurity/custom-rules:/etc/modsecurity.d/custom-rules:ro

      # Certificados TLS (si usas HTTPS real)
      - ./srcs/conf/certs:/etc/nginx/certs:ro

      # Logs
      - ./logs/nginx:/var/log/nginx
      - ./logs/modsec:/var/log/modsecurity
    depends_on:
      - frontend
      - api
    networks:
      - transcendence

  # Example of backend (adjust in project)
  frontend:
    image: nginxinc/nginx-unprivileged:1.27-alpine
    container_name: frontend
    restart: unless-stopped
    expose:
      - "8080"
    networks:
      - transcendence
    volumes:
      # Your already built statics (vite/webpack) must exist in dist/
      - type: bind
        source: ./srcs/frontend/dist
        target: /usr/share/nginx/html
        read_only: true

  api:
    build:
      context: ./srcs/api
      dockerfile: Dockerfile
    image: transcendence-api:local
    container_name: api
    restart: unless-stopped
    expose:
      - "3000"
    networks:
      - transcendence
    # If your app uses variables, add them here:
    # environment:
    #   NODE_ENV: production
    #   PORT: "3000"

  vault:
    image: vault:1.13
    container_name: vault
    restart: unless-stopped
    ports:
      - "8200:8200"
    environment:
      VAULT_ADDR: http://0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    volumes:
      # Config (vault.hcl and certs if use TLS in Vault)
      - type: bind
        source: ${HOME}/data/vault/config
        target: /vault/config
      # Data (backend file)        
      - type: bind
        source: ${HOME}/data/vault/file
        target: /vault/file     # Vault storage (data)
    networks:
      - transcendence

networks:
  transcendence:
    driver:  bridge