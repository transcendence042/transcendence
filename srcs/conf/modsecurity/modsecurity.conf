# =============================================================================
# ModSecurity Core Configuration for Docker/Nginx + OWASP CRS
# Mode: Prevention (blocking)
# Logs: Enabled (audit + optional debug)
# =============================================================================

# ----------------------------------------------------------------------------
# Rule engine initialization 
# ----------------------------------------------------------------------------

# Enable ModSecurity for all transactions.
# On  = blocking mode (recommended for production once tuned)
# DetectionOnly = log only (recommended during initial tuning)
SecRuleEngine On


# ----------------------------------------------------------------------------
# Audit log configuration 
# ----------------------------------------------------------------------------

# Log relevant transactions (5xx and 4xx except 404) and those marked by rules.
SecAuditEngine RelevantOnly
SecAuditLog /var/log/modsecurity/modsec_audit.log
# Log parts to capture full context for investigations.
SecAuditLogParts ABIJDEFHZ
# Serial logging is simplest in containers. For high throughput, consider concurrent.
SecAuditLogType Serial
SecAuditLogRelevantStatus "^(?:5|4(?!04))"


# ----------------------------------------------------------------------------
# Data and temp directories
# ----------------------------------------------------------------------------

# Temp and persistent data directories (ensure they exist and are private in the container).
SecTmpDir /tmp
SecDataDir /var/cache/modsecurity


# ----------------------------------------------------------------------------
# Request/response body handling
# ----------------------------------------------------------------------------

# Allow ModSecurity to inspect request bodies (e.g., POST params).
SecRequestBodyAccess On
# Usually keep OFF for performance unless you need leakage detection.
SecResponseBodyAccess Off
# These settings only apply if SecResponseBodyAccess is enabled.
SecResponseBodyMimeType text/plain text/html text/xml
SecResponseBodyLimit 13107200
SecResponseBodyLimitAction ProcessPartial
# Maximum sizes to mitigate DoS via oversized bodies.
# Adjust if your app legitimately needs larger uploads.
SecRequestBodyLimit 13107200
SecRequestBodyNoFilesLimit 131072
# Action when body exceeds limits.
# Reject is appropriate in blocking mode.
SecRequestBodyLimitAction Reject


# ----------------------------------------------------------------------------
# Default action for rules
# ----------------------------------------------------------------------------

# Defaults to DetectionOnly (log, do not block). CRS and custom rules will override as needed.
SecDefaultAction "phase:1,log,pass"
SecDefaultAction "phase:2,log,pass"


# ----------------------------------------------------------------------------
# Error handling for request body and multipart parsing
# ----------------------------------------------------------------------------

# Fail closed on request body parsing errors.
SecRule REQBODY_ERROR "!@eq 0" "id:200001,phase:2,deny,status:400,log,msg:'Failed to parse request body'"
SecRule REQBODY_PROCESSOR_ERROR "!@eq 0" "id:200002,phase:2,deny,status:400,log,msg:'Request body processor error'"

# Strict validation for multipart/form-data (can be set to DetectionOnly if too strict).
SecRule MULTIPART_STRICT_ERROR "!@eq 0" "id:200003,phase:2,deny,status:400,log,msg:'Multipart request body failed strict validation'"

# Detect unmatched multipart boundaries (1 = critical mismatch).
SecRule MULTIPART_UNMATCHED_BOUNDARY "!@eq 0" "id:200004,phase:2,deny,status:400,log,msg:'Multipart boundary not found'"


# ----------------------------------------------------------------------------
# PCRE / Regex tuning
# ----------------------------------------------------------------------------

# Avoid potential ReDoS via excessive backtracking.
# Tune upwards if you see false positives from CRS (e.g., 2000-5000).
SecPcreMatchLimit 1000
SecPcreMatchLimitRecursion 1000

# Deny on internal ModSecurity engine flags.
SecRule TX:/^MSC_/ "!@streq 0" "id:'200005',phase:2,t:none,deny,msg:'ModSecurity internal error flagged: %{MATCHED_VAR_NAME}'"


# ----------------------------------------------------------------------------
# Miscellaneous
# ----------------------------------------------------------------------------

# Standard form-urlencoded separator and cookie format.
SecArgumentSeparator &
SecCookieFormat 0

# Unicode mapping used by urlDecodeUni transformation.
SecUnicodeMapFile unicode.mapping 20127

# Telemetry about ModSecurity build. Disable in production to reduce info exposure.
SecStatusEngine Off


# ----------------------------------------------------------------------------
# CRS setup and custom rules
# ----------------------------------------------------------------------------

# Load CRS setup (paranoia level, thresholds, exclusions)
Include /etc/modsecurity.d/crs-setup.conf

# Load OWASP CRS rules (core protections)
Include /opt/owasp-crs/rules/*.conf

# Load your custom rules (loaded last so they can override/whitelist)
Include /etc/modsecurity.d/custom-rules/*.conf


# ----------------------------------------------------------------------------
# Secure defaults and baseline hardening
# ----------------------------------------------------------------------------

SecRule REQUEST_METHOD "!^(GET|POST|HEAD|DELETE|PUT)$" \
     "id:'200010',phase:1,deny,log,status:405,msg:'HTTP method not allowed'"

SecRule ARGS|ARGS_NAMES|REQUEST_HEADERS|REQUEST_URI|REQUEST_FILENAME "\.\./" \
     "id:'200011',phase:2,t:none,deny,log,status:403,msg:'Directory Traversal attempt'"

SecRule ARGS "(?i:(union\s+select|select.+from|insert\s+into|drop\s+table))" \
     "id:'200012',phase:2,t:none,deny,log,status:403,msg:'Possible SQL Injection'"

SecRule ARGS "(?i:(<script\b|onerror=|onload=|alert\s*\())" \
     "id:'200013',phase:2,t:none,deny,log,status:403,msg:'Possible XSS attack'"

SecRule REQUEST_HEADERS:User-Agent "(?i:\b(curl|wget|nikto|sqlmap|nessus|python-requests)\b)" \
     "id:'200014',phase:1,t:none,deny,log,status:403,msg:'Suspicious User-Agent blocked'"

SecRule ARGS_NAMES ".{50,}" \
     "id:'200015',phase:2,t:none,deny,log,status:403,msg:'Parameter name too long'"


# =============================================================================
# End of configuration
# =============================================================================



# =============================================================================
# Only for debugging - disable in production unless needed
# =============================================================================

#SecDebugLog /srcs/logs/modsec/modsec_debug.log
#SecDebugLogLevel 9