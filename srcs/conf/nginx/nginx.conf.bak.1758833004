# -----------------------------------------------------------------------------
# Nginx + ModSecurity v3 (OWASP CRS) - Minimal, production-ready skeleton
# -----------------------------------------------------------------------------

# With the owasp/modsecurity-crs:nginx image the module is already available.
# Uncomment only if you build your own image with a dynamic module:

load_module /usr/lib/nginx/modules/ngx_http_modsecurity_module.so;
user  nginx;
worker_processes auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
  worker_connections  1024;
}

http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  sendfile        on;
  tcp_nopush      on;
  tcp_nodelay     on;
  keepalive_timeout  65;
  server_tokens off;

  # ------------------ ModSecurity ------------------
  # Enable ModSecurity globally. You can move these directives into a specific
  # 'server' block if you prefer enabling WAF per vhost.
  modsecurity on;
  modsecurity_rules_file /etc/modsecurity.d/modsecurity.conf;

  # Include custom rules folder (optional)
  # Using separate include keeps your main modsecurity.conf clean.
  # Files can be empty; Nginx won't complain if dir is mounted and readable.

  #modsecurity_rules '
    #Include "/etc/modsecurity.d/custom-rules/*.conf"
  #';

  # ------------------ Upstream to your app ------------------
  upstream frontend_backend  {
    server frontend:8080;  # Change host:port to our backend service (adjust if your SPA runs elsewhere)
    keepalive 32;
  }

  #  upstream api_backend {
  #    server api:3000;        # adjust to your API service/port
  #    keepalive 32;
  #  }

  # ------------------ HTTP -> HTTPS redirect ------------------
  server {
    listen 8080 default_server;
    listen [::]:8080 default_server;
    server_name _;

    # Optional: allow ACME HTTP-01 challenge if you use Let's Encrypt
    location ^~ /.well-known/acme-challenge/ {
      root /var/www/html;
    }

    location / {
      return 301 https://$host$request_uri;
    }
  }

  # ------------------ HTTPS reverse proxy with WAF ------------------
  server {
    listen 8443 ssl http2;
    listen [::]:8443 ssl http2;
    server_name _; # replace with your domain if you have one

    # TLS (replace with real certs; or mount your own via ./conf/certs)
    ssl_certificate     /etc/nginx/certs/fullchain.pem;
    ssl_certificate_key /etc/nginx/certs/privkey.pem;
    ssl_protocols       TLSv1.2 TLSv1.3;
    ssl_ciphers         HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    # Body size limit (align with ModSecurity SecRequestBodyLimit if you need large uploads)
    client_max_body_size 12m;

    # Security headers (adjust to your app needs)
    add_header X-Content-Type-Options nosniff always;
    add_header X-Frame-Options SAMEORIGIN always;
    add_header Referrer-Policy strict-origin-when-cross-origin always;
    add_header X-XSS-Protection "1; mode=block" always;
    # If you deploy CSP, tune carefully to avoid breaking your front-end
    # add_header Content-Security-Policy "default-src 'self';" always;

    # --- API under /api/ ---
    location /api/ {
      ## If your API does NOT expect the /api prefix, uncomment the rewrite:
      ## rewrite ^/api/?(.*)$ /$1 break;
#
      #proxy_set_header Host              $host;
      #proxy_set_header X-Real-IP         $remote_addr;
      #proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      #proxy_set_header X-Forwarded-Proto $scheme;
#
      #proxy_read_timeout   60s;
      #proxy_connect_timeout 60s;
      #proxy_send_timeout    60s;
#
      #proxy_http_version 1.1;
      #proxy_set_header Connection "";
#
      #proxy_pass http://api_backend;
      return 503;
    }

    # --- Front-end (SPA or static) ---
    location / {
      proxy_set_header Host              $host;
      proxy_set_header X-Real-IP         $remote_addr;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      proxy_read_timeout   60s;
      proxy_connect_timeout 60s;
      proxy_send_timeout    60s;

      proxy_http_version 1.1;
      proxy_set_header Connection "";

      proxy_pass http://frontend_backend;

    }

    # Optional: serve static assets directly (tune path)
    # location /static/ {
    #   root /var/www/html;
    #   access_log off;
    #   expires 7d;
    # }
    
  }
}
