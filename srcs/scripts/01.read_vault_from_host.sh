#!/usr/bin/env bash
set -euo pipefail

# Paths to AppRole credentials generated by the init script
ROLE_FILE="./srcs/secrets/api-approle/role_id"
SECRET_FILE="./srcs/secrets/api-approle/secret_id"

if [ ! -f "$ROLE_FILE" ] || [ ! -f "$SECRET_FILE" ]; then 
  echo "Missing $ROLE_FILE or $SECRET_FILE. Run: bash srcs/scripts/00.init_waf_and_vault.sh first."
  exit 1
fi

ROLE_ID="$(cat "$ROLE_FILE")"
SECRET_ID="$(cat "$SECRET_FILE")"

# Vault address (default: https, change if needed)
VAULT_ADDR="${VAULT_ADDR:-https://localhost:8200}"
VAULT_SKIP_VERIFY="${VAULT_SKIP_VERIFY:-true}"

# Check if jq is installed
if ! command -v jq >/dev/null 2>&1; then
  echo "jq is required but not installed. Please install jq and try again."
  exit 1
fi

# 1) Login with AppRole to get a temporary token
TOKEN="$(curl -sk \
  -X POST "$VAULT_ADDR/v1/auth/approle/login" \
  -d "{\"role_id\":\"$ROLE_ID\",\"secret_id\":\"$SECRET_ID\"}" \
  | jq -r '.auth.client_token')"

if [ -z "$TOKEN" ] || [ "$TOKEN" == "null" ]; then
  echo "Couldn't get token. Is Vault running and unsealed? (docker compose up -d vault)"
  exit 1
fi

# 2) Read secrets from kv/transcendence/api (KV v2 uses /data/)
JSON="$(curl -sk -H "X-Vault-Token: $TOKEN" "$VAULT_ADDR/v1/kv/data/transcendence/api")"

# 3) Extract values using jq
JWT_SECRET="$(echo "$JSON" | jq -r '.data.data.JWT_SECRET // empty')"
DB_PASSWORD="$(echo "$JSON" | jq -r '.data.data.DB_PASSWORD // empty')"
OAUTH_SECRET="$(echo "$JSON" | jq -r '.data.data.OAUTH_CLIENT_SECRET // empty')"

echo "JWT_SECRET=$JWT_SECRET"
echo "DB_PASSWORD=$DB_PASSWORD"
echo "OAUTH_CLIENT_SECRET=$OAUTH_SECRET"